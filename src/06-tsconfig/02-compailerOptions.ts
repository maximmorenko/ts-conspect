// Опции компилятора

// {
//     "compilerOptions": {
//         "target": "ES5", //таргет определяет во что будем преобразовывать (ES6 === ES2015)
//         "lib": [ES2015, ES2016, ES2017, "DOM"], // если нужны дополнительные библиотеки, более новые версии ES, то указываем их здесь
        
//         "module": "ES6", // указывает какую модульную систему будет импеть собраное приложение

//         "moduleResolution": "node", // зависит от того, что указано в "module"

//         "outFile": "./", // нужен если хотим собрать всё приложение в один файл

//         "outDir": "dist", // выходная директория, указываем папку для выхода

//         "downlevelIteration": true, // нужет если мы собираем приложение в более низкую версию, в которой нет фичей из новых версий

//         "isolatedModules": true, // требует импорты экспорты модулей, не позволяет создавать глобальные переменные

//         "esModuleInterop": true, // позволяем делать все импорты одинаковыми, через import (библиотеки, модули)

//         "allowSyntheticDefaultImports": true, // позволить синтетические дефолтные импорты, некоторые библиотеки не имеют экспорта по умолчанию, эта приблуда позволяет делать их импорты как обычно, через import

//         "forceConsistentCasingInFileNames": true, // не позволяет писать названия импортируемых файлов как попало, только в таком регистре как был сделан экспорт

//         "strict": true,

//         "declaration": true, // если пишем свою библиотеку
//         "declarationDir": "./", // указываем путь, создаем папку где будут созданы декларации своей библиотеки, файлы с типами

//         "noEmit": true, // с этим ключем TS будет использоваться только для проверки типов

//         "importHelpers": true, // позволяет использовать хелперы (фитчи из новых версий в старых)
//         // предварительно нужно установить библиотеку npm i -D tslib

//         "allowJs": true, //используется когда делаем миграцию с JS на TS, позволяем быть и тем и другим типам файлов
//         "checkJs": true, //позволяем проверять ошибки в JS файлах, это правило включится автоматом, если включить "allowJs"

//         "experimentalDecorators": true, // при использовании декораторов
//         "emitDecoratorMetadata": true, // расширяет возможности декораторов

//         "resolveJsonModule": true, //позволяем пользоваться json файлом, импортировать его в ТС

//         "jsx": "react-jsx", // нужен при использовании jsx файлов

//     },
//     "include": ["src"],
//     "exclude": ["node_modules"]
// }
