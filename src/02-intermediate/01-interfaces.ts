// чтобы убрать глобальный дуступ ко всем интерфейса во всех фалах, нужно сделать файл модулем
// для этого нужно что-то експортировать из файла
// после чего все интерфейсы файла станут недоступни в глобальной видимости
// будет доступ только через импорт

// есть еще один тип параметров readonly
// например когда мы хотим запретить менять email
// после первой записи поля с типом readonly изменить нельзя
interface User {
    readonly email: string,
    readonly login: string,
    password: string,
}

// интерфейсы можно наращивать, дополнять
// интерфейсы склеиваются
interface User {
    isOnline?: boolean,
}

const user1: User = {
    // в автоподсказках теперь будет 4 поля
    login: 'dfdf',
    password: 'hhh',
    email: 'dfdf@dfdf',
    isOnline: true,
}

// также можно наращивать глобальный интерфейс Window
// interface Window {
//     isAuth?: boolean,
// }
// window.isAuth

// также можно склеивать интерфейсы с разными названиями
interface Person {
    readonly firstName: string,
    lastName: string,
    phone?: string,
    yearObBirth?: number,
}

// создадим общий интерфейс Сотрудник, который будет расширяться от других интерфейсов
// ключевое слово extends дальше через запятую перечисляем нужные интерфейсы
export interface Employee extends User, Person {
    // теперь дочернему интерфейсу Employee доступны все унаследованые поля он родительских интерфейсов
    // дочерний инт. также можно расширить
    dateContract: Date,
    // дочерний инт. может в свою очередь, стать родительским для какого-то инт
    // родительские поля можно переопределять в дочернем (обяз / необяз)
    phone: string, //теперь тел. обязательное поле

    // интерфейс может содержать методы (для калассов)
    // методы также могут быть необязательные
    say(): void,
    code?: (arg: string) => void,
}

// клас может быть создан на основании интерфейса
// class MyDev implements Employee {}
