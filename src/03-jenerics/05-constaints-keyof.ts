// задача
// по ключу вернуть значение из объекта, при условии что оно обязательно должно быть

// вар 1
function prop<T, U extends keyof T>(key: U, obj: T): T[U] {
    // чтобы типизировать key воспользуемся сужением (расширение дженерика extends)
    // создадим дженерик U для key. и сократим его значения (extends) до следующей сущности: 
    // обратись через keyof к тому объекту, который ты получишь
    // и возьми его ключи.
    // иначе говоря создай динамически юнион ключей объекта и осхрани его как переменную
    return obj[key]
}

// вар 2
function prop2<T>(key: keyof T, obj: T): T[keyof T] {
    // чтобы типизировать key воспользуемся сужением (расширение дженерика extends)
    // логика та же что и в первом вар, но второй параметр уже не нужен
    return obj[key]
}

const obj1 = {
    a: 1, 
    b: '2', 
    c: true
}
prop('a', obj1) // все ок получим 1
// prop('d', obj1) // так как в созданом юнионе ('a' | 'b' | 'c') нет 'd' то получим ошибку


// пример 2
export interface Leptop {
    brand: string;
    year: number;
}
type F = Leptop['brand']
